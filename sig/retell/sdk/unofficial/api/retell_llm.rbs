module Retell
  module SDK
    module Unofficial
      module API
        class RetellLLM
          type model = "gpt_4o" | "gpt_4o_mini" | "claude_3_5_sonnet" | "claude_3_haiku"

          type tool = (end_call_tool | transfer_call_tool | cal_tool | press_digit_tool | custom_tool)

          type tool_parameter = {
            type: :object,
            properties: Hash[String, untyped],
            required: Array[String]?
          }

          type state_edge = {
            destination_state_name: String,
            description: String,
            parameters: tool_parameter?
          }

          type end_call_tool = {
            type: :end_call,
            name: String,
            description: String?
          }

          type transfer_call_tool = {
            type: :transfer_call,
            name: String,
            description: String?,
            number: String
          }

          type cal_tool = {
            type: :check_availability_cal | :book_appointment_cal,
            name: String,
            description: String?,
            cal_api_key: String,
            event_type_id: Integer,
            timezone: String?
          }

          type press_digit_tool = {
            type: :press_digit,
            name: String,
            description: String?
          }

          type custom_tool = {
            type: "custom",
            name: String,
            url: String,
            description: String,
            parameters: tool_parameter,
            speak_during_execution: bool,
            speak_after_execution: bool,
            execution_message_description: String?,
            timeout_ms: Integer?
          }

          type state = {
            name: String,
            state_prompt: String,
            edges: Array[state_edge]?,
            tools: Array[tool]?
          }

          def initialize: (Retell::SDK::Unofficial::Client) -> void

          def create: (
            ?begin_message: String?,
            ?general_prompt: String?,
            ?general_tools: Array[tool]?,
            ?inbound_dynamic_variables_webhook_url: String?,
            ?model: model?,
            ?model_temperature: Float?,
            ?starting_state: String?,
            ?states: Array[state]?,
            ?extra_headers: Hash[String, String]?,
            ?extra_query: Hash[String, String]?,
            ?extra_body: Hash[Symbol, untyped]?,
            ?timeout: Integer?
          ) -> Retell::SDK::Unofficial::RetellLLM

          def retrieve: (
            String | Retell::SDK::Unofficial::RetellLLM llm_or_id,
            ?extra_headers: Hash[String, String]?,
            ?extra_query: Hash[String, String]?,
            ?extra_body: Hash[Symbol, untyped]?,
            ?timeout: Integer?
          ) -> Retell::SDK::Unofficial::RetellLLM

          def update: (
            String | Retell::SDK::Unofficial::RetellLLM llm_or_id,
            ?begin_message: String?,
            ?general_prompt: String?,
            ?general_tools: Array[tool]?,
            ?inbound_dynamic_variables_webhook_url: String?,
            ?model: model?,
            ?model_temperature: Float?,
            ?starting_state: String?,
            ?states: Array[state]?,
            ?extra_headers: Hash[String, String]?,
            ?extra_query: Hash[String, String]?,
            ?extra_body: Hash[Symbol, untyped]?,
            ?timeout: Integer?
          ) -> Retell::SDK::Unofficial::RetellLLM

          def list: (
            ?extra_headers: Hash[String, String]?,
            ?extra_query: Hash[String, String]?,
            ?extra_body: Hash[Symbol, untyped]?,
            ?timeout: Integer?
          ) -> Retell::SDK::Unofficial::RetellLLMList

          def delete: (
            String | Retell::SDK::Unofficial::RetellLLM llm_or_id,
            ?extra_headers: Hash[String, String]?,
            ?extra_query: Hash[Symbol, untyped]?,
            ?extra_body: Hash[Symbol, untyped]?,
            ?timeout: Integer?
          ) -> nil

          private

          def validate_model: (String model) -> void
          def validate_model_temperature: (Float model_temperature) -> void
          def validate_general_tools: (Array[untyped] general_tools) -> void
          def validate_states: (Array[untyped] states) -> void
          def validate_non_empty_string: (String value, String param_name) -> void
          def validate_state: (Hash[Symbol, untyped] state) -> void
          def validate_general_tool: (Hash[Symbol, untyped] tool) -> void
          def validate_custom_tool: (Hash[Symbol, untyped] tool) -> void
          def validate_timeout_ms: (Integer timeout_ms) -> void
          def validate_custom_tool_parameters: (Hash[Symbol, untyped] parameters) -> void
          def validate_state_edges: (Array[Hash[Symbol, untyped]] edges) -> void
          def validate_state_edge: (Hash[Symbol, untyped] edge) -> void
          def validate_state_edge_parameters: (Hash[Symbol, untyped] parameters) -> void
          def validate_tool_keys: (Hash[Symbol, untyped] tool, required: Array[Symbol], optional: Array[Symbol]) -> void
        end
      end
    end
  end
end
